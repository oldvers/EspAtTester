/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package console;

import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author oleksandr.kukharchuk
 */
public class MainFrame extends javax.swing.JFrame
{
  private static SerialPort port;

  /**
   * Creates new form MainFrame
   */
  public MainFrame()
  {
    initComponents();
    
    jCBPorts.removeAllItems();
    String[] ports = SerialPortList.getPortNames();
    for (String port : ports)
    {
      jCBPorts.addItem(port);
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT
   * modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jScrollPane1 = new javax.swing.JScrollPane();
    jTALog = new Log();
    jCBPorts = new javax.swing.JComboBox<>();
    jBPort = new javax.swing.JButton();
    jPanel1 = new javax.swing.JPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jTALog.setBackground(new java.awt.Color(0, 0, 0));
    jTALog.setColumns(20);
    jTALog.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
    jTALog.setForeground(new java.awt.Color(51, 255, 102));
    jTALog.setRows(5);
    jScrollPane1.setViewportView(jTALog);

    jBPort.setText("Open");
    jBPort.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jBPortActionPerformed(evt);
      }
    });

    jPanel1.setBackground(new java.awt.Color(153, 255, 153));
    jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 15, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 8, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1))
          .addGroup(layout.createSequentialGroup()
            .addGap(16, 16, 16)
            .addComponent(jCBPorts, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jBPort)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 603, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jCBPorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jBPort)
          .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(83, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jBPortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jBPortActionPerformed
  {//GEN-HEADEREND:event_jBPortActionPerformed
    port = new SerialPort(jCBPorts.getSelectedItem().toString());
    try
    {
      //Open serial port
      port.openPort();
      //Set params. Also you can set params by this string: serialPort.setParams(9600, 8, 1, 0);
      port.setParams(SerialPort.BAUDRATE_115200, 
                     SerialPort.DATABITS_8,
                     SerialPort.STOPBITS_1,
                     SerialPort.PARITY_NONE);
      //  serialPort.writeBytes("This is a test string".getBytes());//Write data to port
      //port.closePort();//Close serial port
      //Prepare mask
      int mask = SerialPort.MASK_RXCHAR + SerialPort.MASK_CTS + SerialPort.MASK_DSR;
      //Set mask
      port.setEventsMask(mask);
      port.addEventListener(new SerialPortReader());//Add SerialPortEventListener
    }
    catch (SerialPortException ex)
    {
      jTALog.printString("ERROR! " + ex.getMessage());
    }
  }//GEN-LAST:event_jBPortActionPerformed
  
  /*
   * In this class must implement the method serialEvent, through it we learn about 
   * events that happened to our port. But we will not report on all events but only 
   * those that we put in the mask. In this case the arrival of the data and change the 
   * status lines CTS and DSR
   */
  private class SerialPortReader implements SerialPortEventListener
  {
    @Override
    public void serialEvent(SerialPortEvent event)
    {
      if(event.isRXCHAR())
      {
        //If data is available
        if(event.getEventValue() >= 10)
        {
          //Check bytes count in the input buffer
          //Read data, if 10 bytes available 
          try
          {
            byte buffer[] = port.readBytes(10);
            jTALog.printArray(buffer, 0, buffer.length);
          }
          catch (SerialPortException ex)
          {
            jTALog.printString("ERROR! " + ex.getMessage());
          }
        }
      }
      else if(event.isCTS())
      {
        //If CTS line has changed state
        if(event.getEventValue() == 1)
        {
          //If line is ON
          jTALog.printString("CTS - ON");
        }
        else
        {
          jTALog.printString("CTS - OFF");
        }
      }
      else if(event.isDSR())
      {
        //If DSR line has changed state
        if(event.getEventValue() == 1)
        {
          //If line is ON
          jTALog.printString("DSR - ON");
        }
        else
        {
          jTALog.printString("DSR - OFF");
        }
      }
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new MainFrame().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jBPort;
  private javax.swing.JComboBox<String> jCBPorts;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  /*
  private javax.swing.JTextArea jTALog;
  */
  private Log jTALog;
  // End of variables declaration//GEN-END:variables
}
